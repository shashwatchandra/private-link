{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "projectName": {
        "type": "string",
        "defaultValue": "plsvc",        
        "metadata": {
          "description": "Specifies a project name that is used for generating resource names."
        }
      },
      "location": {
        "type": "string",
        "allowedValues": [
          "centralus",
          "eastus",
          "eastus2",
          "westus2",
          "francecentral",
          "northeurope",
          "uksouth",
          "westeurope",
          "japaneast",
          "southeastasia"
        ],
        "metadata": {
          "description": "Specifies the location for all of the resources created by this template. Availability zones are only supported in certain regions.  For the last supported zones, see https://docs.microsoft.com/en-us/azure/availability-zones/az-overview#services-support-by-region."
        }
      },
      "adminUsername": {
        "type": "string",
        "metadata": {
          "description": "Specifies the virtual machine administrator username."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Specifies the virtual machine administrator password."
        }
      }
    },
    "variables": {
      "lbName": "[concat(parameters('projectName'),'-lb')]",
      "lbSkuName": "Standard",
      "lbPublicIpAddressName": "[concat(parameters('projectName'),'-lb-pip')]",      
      "lbFrontEndName": "LoadBalancerFrontEnd",
      "lbBackendPoolName": "LoadBalancerBackEndPool",
      "lbProbeName": "loadBalancerHealthProbe",
      "nsgName": "[concat(parameters('projectName'),'-nsg')]",
      "vNetName": "[concat(parameters('projectName'),'-vnet')]",
      "vNetAddressPrefix": "192.168.200.0/24",
      "vNetSubnetName": "BackendSubnet",
      "vNetSubnetAddressPrefix": "192.168.200.0/24",
      "vmSize": "Standard_DS1_v2",
      "vmStorageAccountType": "Premium_LRS"
    },
    "resources": [
      {
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2018-12-01",
        "name": "[variables('lbName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[variables('lbSkuName')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicIPAddresses', variables('lbPublicIpAddressName'))]"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "[variables('lbFrontEndName')]",
              "properties": {
                "publicIPAddress":{
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIpAddressName'))]"
                }                                
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('lbBackendPoolName')]"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "HTTPLBRule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbName'), variables('lbFrontEndName'))]"
                },
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
                },
                "frontendPort": 80,
                "backendPort": 80,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 4,
                "protocol": "Tcp",
                "enableTcpReset": false,
                "loadDistribution": "Default",
                "disableOutboundSnat": false,
                "probe": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('lbName'), variables('lbProbeName'))]"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "[variables('lbProbeName')]",
              "properties": {
                "protocol": "Http",
                "port": 80,
                "requestPath": "/",
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2018-12-01",
        "name": "[variables('lbPublicIPAddressName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[variables('lbSkuName')]"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static"
        }
      },      
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2018-12-01",
        "name": "[variables('nsgName')]",
        "location": "[parameters('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "AllowHTTPInbound",
              "properties": {
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "80",
                "sourceAddressPrefix": "Internet",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Inbound"
              }
            }            
          ]
        }
      },
      {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2018-12-01",
        "name": "[variables('vNetName')]",
        "location": "[parameters('location')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('vNetAddressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('vNetSubnetName')]",
              "properties": {
                "addressPrefix": "[variables('vNetSubnetAddressPrefix')]",
                "privateLinkServiceNetworkPolicies": "Disabled",
                "privateEndpointNetworkPolicies": "Disabled"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2018-10-01",
        "name": "[concat(parameters('projectName'),'-vm', copyIndex(1))]",
        "location": "[parameters('location')]",
        "zones": [
          "[copyIndex(1)]"
        ],
        "copy": {
          "name": "vmCopy",
          "count": 3
        },
        "dependsOn": [
          "networkInterfaceCopy"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('vmSize')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2019-Datacenter",
              "version": "latest"
            },
            "osDisk": {
              "createOption": "fromImage",
              "managedDisk": {
                "storageAccountType": "[variables('vmStorageAccountType')]"
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('projectName'),'-vm', copyIndex(1), '-nic'))]"
              }
            ]
          },
          "osProfile": {
            "computerName": "[concat(parameters('projectName'),'-vm', copyIndex(1))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "windowsConfiguration": {
              "enableAutomaticUpdates": true,
              "provisionVmAgent": true
            }
          }
        }
      },      
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2018-12-01",
        "name": "[concat(parameters('projectName'),'-vm', copyIndex(1), '-nic')]",
        "location": "[parameters('location')]",
        "copy": {
          "name": "networkInterfaceCopy",
          "count": 3
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
          "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName'))]",
          "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]"         
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vNetName'), variables('vNetSubnetName'))]"
                },                
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('lbName'), variables('lbBackendPoolName'))]"
                  }
                ]
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "apiVersion": "2018-10-01",
        "name": "[concat(parameters('projectName'),'-vm', copyIndex(1), '/', 'InstallWebServer')]",
        "location": "[parameters('location')]",
        "copy": {
          "name": "extensionCopy",
          "count": 3
        },
        "dependsOn": [
          "vmCopy"
        ],
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.7",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "commandToExecute": "powershell.exe Install-WindowsFeature -name Web-Server -IncludeManagementTools && powershell.exe remove-item 'C:\\inetpub\\wwwroot\\iisstart.htm' && powershell.exe Add-Content -Path 'C:\\inetpub\\wwwroot\\iisstart.htm' -Value $('Hello World from ' + $env:computername)"
          }
        }
      }
    ]
  }